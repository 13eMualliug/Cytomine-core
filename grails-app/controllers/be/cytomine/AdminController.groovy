package be.cytomine

import be.cytomine.Exception.InvalidRequestException
import be.cytomine.Exception.WrongArgumentException
import be.cytomine.api.RestController
import be.cytomine.image.AbstractImage
import be.cytomine.image.ImageInstance
import be.cytomine.image.multidim.ImageGroup
import be.cytomine.image.multidim.ImageSequence
import be.cytomine.ontology.AlgoAnnotation
import be.cytomine.ontology.AnnotationTerm
import be.cytomine.ontology.ReviewedAnnotation
import be.cytomine.ontology.Term
import be.cytomine.ontology.UserAnnotation
import be.cytomine.project.Project
import be.cytomine.security.SecUser
import be.cytomine.security.User
import be.cytomine.test.BasicInstanceBuilder
import be.cytomine.utils.GisUtils
import com.vividsolutions.jts.io.WKTReader
import geb.Browser
import grails.plugins.springsecurity.Secured
import grails.validation.Validateable
import groovy.sql.Sql
import static org.springframework.security.acls.domain.BasePermission.READ

@Secured(['ROLE_ADMIN'])
class AdminController extends RestController {


    def grailsApplication
    def modelService
    def springSecurityService
    def archiveCommandService

    def index() {
      //don't remove this, it calls admin/index.gsp layout !
    }


    def archive() {
        archiveCommandService.archiveOldCommand()
        responseSuccess([])
    }


    def analyze() {
       def form = "POLYGON ((15256 13406, 15270 13406, 15314 13406, 15354 13336, 15330 13404, 15632 13406, 15688 13304, 15688 13210, 15674 13208, 15688 13196, 15680 12996, 15688 13000, 15686 12990, 15688 12988, 15688 12932, 15688 12900, 15660 12938, 15658 12900, 15650 12900, 15534 12900, 15522 12922, 15526 12900, 15468 12900, 15386 12964, 15444 13044, 15432 13080, 15372 12964, 15342 12972, 15256 13406), (15270 13406, 15266 13402, 15264 13396, 15262 13380, 15282 13378, 15292 13404, 15276 13400, 15270 13406), (15688 12932, 15686 12934, 15682 12934, 15680 12932, 15686 12930, 15688 12932), (15650 12900, 15652 12902, 15650 12904, 15648 12902, 15650 12900), (15432 13080, 15434 13078, 15436 13080, 15434 13082, 15432 13080), (15680 13262, 15680 13254, 15682 13252, 15686 13260, 15680 13262), (15678 13114, 15678 13106, 15680 13104, 15684 13114, 15678 13114), (15674 13140, 15672 13124, 15676 13122, 15680 13140, 15674 13140), (15668 13104, 15654 13084, 15670 13076, 15676 13104, 15668 13104), (15658 13292, 15652 13284, 15666 13264, 15672 13286, 15658 13292), (15664 13160, 15660 13156, 15670 13144, 15672 13154, 15664 13160), (15668 13124, 15670 13120, 15672 13122, 15670 13126, 15668 13124), (15650 13346, 15650 13334, 15656 13330, 15660 13346, 15650 13346), (15656 13034, 15650 13028, 15654 13018, 15660 13024, 15656 13034), (15646 13056, 15648 13050, 15650 13048, 15652 13054, 15646 13056), (15640 13170, 15644 13168, 15646 13170, 15642 13172, 15640 13170), (15640 13332, 15640 13326, 15644 13322, 15646 13332, 15640 13332), (15634 12924, 15634 12918, 15636 12916, 15640 12924, 15634 12924), (15636 13228, 15632 13224, 15636 13218, 15640 13224, 15636 13228), (15614 13300, 15606 13290, 15612 13250, 15636 13264, 15614 13300), (15626 13214, 15622 13184, 15636 13174, 15632 13214, 15626 13214), (15624 12956, 15624 12932, 15632 12930, 15632 12950, 15624 12956), (15624 13028, 15628 13026, 15630 13028, 15626 13030, 15624 13028), (15626 13098, 15622 13094, 15624 13088, 15628 13090, 15626 13098), (15622 12968, 15624 12966, 15626 12968, 15624 12970, 15622 12968), (15614 13246, 15620 13242, 15624 13246, 15616 13248, 15614 13246), (15618 13200, 15620 13198, 15622 13200, 15620 13202, 15618 13200), (15588 13038, 15590 13036, 15592 13038, 15590 13040, 15588 13038), (15590 13040, 15596 13036, 15598 13034, 15596 13032, 15598 13030, 15600 13032, 15602 13026, 15610 13024, 15620 13062, 15602 13084, 15590 13040), (15616 13092, 15618 13090, 15620 13092, 15618 13094, 15616 13092), (15616 13230, 15616 13222, 15618 13220, 15620 13230, 15616 13230), (15616 13318, 15616 13314, 15618 13312, 15620 13318, 15616 13318), (15600 13218, 15596 13180, 15618 13152, 15618 13182, 15600 13218), (15614 13122, 15616 13120, 15618 13122, 15616 13124, 15614 13122), (15614 13244, 15608 13236, 15610 13232, 15616 13236, 15614 13244), (15606 13336, 15606 13328, 15612 13326, 15614 13336, 15606 13336), (15584 13150, 15582 13142, 15604 13112, 15608 13124, 15584 13150), (15604 12988, 15600 12984, 15606 12982, 15608 12986, 15604 12988), (15580 13108, 15580 13090, 15604 13090, 15588 13110, 15580 13108), (15596 13108, 15598 13106, 15600 13108, 15598 13110, 15596 13108), (15594 12958, 15596 12956, 15598 12958, 15596 12960, 15594 12958), (15592 13034, 15594 13032, 15596 13034, 15594 13036, 15592 13034), (15590 12950, 15592 12948, 15594 12950, 15592 12952, 15590 12950), (15584 13376, 15586 13372, 15592 13374, 15588 13378, 15584 13376), (15580 13166, 15580 13158, 15586 13152, 15588 13162, 15580 13166), (15584 13302, 15584 13294, 15586 13292, 15588 13302, 15584 13302), (15584 13316, 15586 13312, 15588 13314, 15586 13318, 15584 13316), (15554 13384, 15532 13336, 15586 13250, 15572 13376, 15554 13384), (15582 13138, 15578 13134, 15580 13132, 15584 13134, 15582 13138), (15566 13248, 15566 13204, 15580 13186, 15582 13220, 15566 13248), (15574 13078, 15574 13068, 15578 13066, 15580 13078, 15574 13078), (15576 13156, 15578 13154, 15580 13156, 15578 13158, 15576 13156), (15574 13112, 15576 13110, 15578 13112, 15576 13114, 15574 13112), (15576 13114, 15578 13116, 15576 13118, 15574 13116, 15576 13114), (15566 13400, 15562 13388, 15570 13382, 15572 13396, 15566 13400), (15566 13254, 15568 13252, 15570 13254, 15568 13256, 15566 13254), (15562 13192, 15564 13190, 15566 13192, 15564 13194, 15562 13192), (15508 13304, 15558 13186, 15560 13268, 15508 13304), (15546 13184, 15548 13180, 15550 13182, 15548 13186, 15546 13184), (15542 13124, 15546 13122, 15548 13124, 15544 13126, 15542 13124), (15544 13130, 15546 13126, 15548 13128, 15546 13132, 15544 13130), (15520 13026, 15514 13010, 15526 12992, 15544 13010, 15520 13026), (15540 12984, 15542 12982, 15544 12984, 15542 12986, 15540 12984), (15536 12980, 15538 12978, 15540 12980, 15538 12982, 15536 12980), (15528 13088, 15526 13060, 15532 13056, 15538 13078, 15528 13088), (15528 13362, 15530 13360, 15532 13362, 15530 13364, 15528 13362), (15520 12930, 15522 12928, 15524 12930, 15522 12932, 15520 12930), (15516 13142, 15518 13140, 15520 13142, 15518 13144, 15516 13142), (15518 13370, 15514 13366, 15516 13358, 15520 13360, 15518 13370), (15510 13042, 15510 13036, 15512 13034, 15516 13038, 15510 13042), (15506 13092, 15508 13088, 15512 13090, 15510 13094, 15506 13092), (15504 13232, 15502 13220, 15506 13216, 15510 13232, 15504 13232), (15486 13362, 15482 13346, 15490 13344, 15494 13358, 15486 13362), (15486 13260, 15480 13246, 15486 13236, 15492 13254, 15486 13260), (15486 13090, 15488 13086, 15490 13088, 15488 13092, 15486 13090), (15480 12928, 15482 12910, 15486 12904, 15488 12928, 15480 12928), (15482 13396, 15482 13392, 15484 13390, 15486 13396, 15482 13396), (15478 13228, 15480 13226, 15482 13228, 15480 13230, 15478 13228), (15472 13148, 15472 13142, 15476 13138, 15478 13144, 15472 13148), (15476 13138, 15478 13136, 15480 13138, 15478 13140, 15476 13138), (15474 13378, 15474 13372, 15478 13368, 15480 13378, 15474 13378), (15476 12942, 15478 12940, 15480 12942, 15478 12944, 15476 12942), (15472 13116, 15472 13104, 15478 13098, 15478 13114, 15472 13116), (15464 13014, 15448 12990, 15456 12978, 15468 12994, 15464 13014), (15462 13162, 15464 13160, 15466 13162, 15464 13164, 15462 13162), (15462 13170, 15464 13168, 15466 13170, 15464 13172, 15462 13170), (15450 13358, 15452 13352, 15456 13354, 15452 13360, 15450 13358), (15444 13308, 15444 13290, 15448 13288, 15454 13302, 15444 13308), (15450 13100, 15450 13090, 15454 13088, 15454 13100, 15450 13100), (15438 13120, 15440 13110, 15446 13106, 15450 13114, 15438 13120), (15446 13282, 15448 13280, 15450 13282, 15448 13284, 15446 13282), (15440 13138, 15442 13136, 15444 13138, 15442 13140, 15440 13138), (15426 13166, 15428 13162, 15432 13164, 15428 13168, 15426 13166), (15432 13164, 15434 13162, 15436 13164, 15434 13166, 15432 13164), (15430 13188, 15434 13186, 15436 13188, 15432 13190, 15430 13188), (15398 13144, 15406 13102, 15430 13088, 15416 13138, 15398 13144), (15416 13312, 15418 13306, 15420 13304, 15422 13312, 15416 13312), (15384 13230, 15366 13190, 15402 13220, 15384 13230), (15394 13092, 15390 13084, 15398 13082, 15402 13086, 15394 13092), (15398 13318, 15400 13316, 15402 13318, 15400 13320, 15398 13318), (15390 13318, 15390 13298, 15394 13288, 15400 13312, 15390 13318), (15376 13188, 15378 13186, 15380 13188, 15378 13190, 15376 13188), (15376 13250, 15378 13248, 15380 13250, 15378 13252, 15376 13250), (15358 12992, 15364 12980, 15376 12982, 15374 12994, 15358 12992), (15366 13084, 15368 13082, 15370 13084, 15368 13086, 15366 13084), (15348 13154, 15338 13140, 15352 13132, 15360 13142, 15348 13154), (15338 13136, 15340 13134, 15342 13136, 15340 13138, 15338 13136), (15310 13332, 15312 13330, 15314 13332, 15312 13334, 15310 13332))"


        def form2 = "POLYGON ((15036.337718813 13134.0302886, 15033.337718813 13136.0302886, 15030.337718813 13139.0302886, 15027.337718813 13142.0302886, 15009.337718813 13165.0302886, 15004.337718813 13174.0302886, 14999.337718813 13182.0302886, 14994.337718813 13191.0302886, 14989.337718813 13214.0302886, 14989.337718813 13223.0302886, 14989.337718813 13232.0302886, 14989.337718813 13252.0302886, 14989.337718813 13283.0302886, 14992.337718813 13292.0302886, 14994.337718813 13299.0302886, 15004.337718813 13323.0302886, 15006.337718813 13330.0302886, 15009.337718813 13335.0302886, 15023.337718813 13350.0302886, 15030.337718813 13355.0302886, 15036.337718813 13357.0302886, 15053.337718813 13362.0302886, 15060.337718813 13362.0302886, 15067.337718813 13363.0302886, 15101.337718813 13367.0302886, 15110.337718813 13369.0302886, 15116.337718813 13369.0302886, 15142.337718813 13369.0302886, 15148.337718813 13369.0302886, 15154.337718813 13369.0302886, 15172.337718813 13368.0302886, 15177.337718813 13366.0302886, 15180.337718813 13365.0302886, 15188.337718813 13361.0302886, 15192.337718813 13358.0302886, 15194.337718813 13356.0302886, 15196.337718813 13354.0302886, 15200.337718813 13347.0302886, 15203.337718813 13343.0302886, 15203.337718813 13340.0302886, 15207.337718813 13329.0302886, 15207.337718813 13324.0302886, 15207.337718813 13320.0302886, 15208.337718813 13317.0302886, 15211.337718813 13301.0302886, 15213.337718813 13292.0302886, 15215.337718813 13284.0302886, 15217.337718813 13276.0302886, 15220.337718813 13257.0302886, 15220.337718813 13250.0302886, 15222.337718813 13244.0302886, 15230.337718813 13218.0302886, 15232.337718813 13212.0302886, 15232.337718813 13209.0302886, 15234.337718813 13199.0302886, 15235.337718813 13198.0302886, 15235.337718813 13196.0302886, 15238.337718813 13182.0302886, 15241.337718813 13175.0302886, 15242.337718813 13169.0302886, 15246.337718813 13154.0302886, 15246.337718813 13149.0302886, 15247.337718813 13146.0302886, 15247.337718813 13142.0302886, 15248.337718813 13135.0302886, 15250.337718813 13132.0302886, 15250.337718813 13131.0302886, 15250.337718813 13125.0302886, 15250.337718813 13124.0302886, 15249.337718813 13123.0302886, 15247.337718813 13119.0302886, 15243.337718813 13116.0302886, 15238.337718813 13113.0302886, 15237.337718813 13111.0302886, 15234.337718813 13110.0302886, 15227.337718813 13109.0302886, 15224.337718813 13108.0302886, 15222.337718813 13107.0302886, 15218.337718813 13106.0302886, 15216.337718813 13106.0302886, 15213.337718813 13105.0302886, 15206.337718813 13103.0302886, 15200.337718813 13103.0302886, 15198.337718813 13102.0302886, 15191.337718813 13102.0302886, 15190.337718813 13101.0302886, 15189.337718813 13101.0302886, 15187.337718813 13101.0302886, 15036.337718813 13134.0302886), (15109.337718813 13303.0302886, 15136.337718813 13312.0302886, 15136.337718813 13315.0302886, 15136.337718813 13316.0302886, 15136.337718813 13317.0302886, 15136.337718813 13318.0302886, 15135.337718813 13320.0302886, 15134.337718813 13322.0302886, 15134.337718813 13324.0302886, 15132.337718813 13326.0302886, 15131.337718813 13327.0302886, 15130.337718813 13328.0302886, 15128.337718813 13329.0302886, 15127.337718813 13330.0302886, 15125.337718813 13331.0302886, 15124.337718813 13332.0302886, 15122.337718813 13332.0302886, 15121.337718813 13332.0302886, 15115.337718813 13332.0302886, 15113.337718813 13332.0302886, 15112.337718813 13331.0302886, 15110.337718813 13330.0302886, 15107.337718813 13328.0302886, 15104.337718813 13324.0302886, 15103.337718813 13323.0302886, 15103.337718813 13321.0302886, 15102.337718813 13319.0302886, 15102.337718813 13317.0302886, 15102.337718813 13316.0302886, 15102.337718813 13313.0302886, 15102.337718813 13311.0302886, 15103.337718813 13308.0302886, 15103.337718813 13307.0302886, 15104.337718813 13306.0302886, 15105.337718813 13305.0302886, 15106.337718813 13304.0302886, 15107.337718813 13303.0302886, 15108.337718813 13303.0302886, 15109.337718813 13303.0302886), (15147.337718813 13264.0302886, 15157.337718813 13254.0302886, 15160.337718813 13254.0302886, 15161.337718813 13254.0302886, 15162.337718813 13254.0302886, 15163.337718813 13255.0302886, 15169.337718813 13256.0302886, 15171.337718813 13257.0302886, 15174.337718813 13258.0302886, 15176.337718813 13259.0302886, 15178.337718813 13261.0302886, 15183.337718813 13269.0302886, 15183.337718813 13270.0302886, 15183.337718813 13271.0302886, 15183.337718813 13273.0302886, 15183.337718813 13275.0302886, 15182.337718813 13278.0302886, 15181.337718813 13280.0302886, 15179.337718813 13282.0302886, 15177.337718813 13283.0302886, 15175.337718813 13284.0302886, 15168.337718813 13285.0302886, 15167.337718813 13285.0302886, 15165.337718813 13285.0302886, 15156.337718813 13281.0302886, 15155.337718813 13280.0302886, 15153.337718813 13278.0302886, 15147.337718813 13269.0302886, 15146.337718813 13267.0302886, 15146.337718813 13265.0302886, 15147.337718813 13264.0302886), (15166.337718813 13206.0302886, 15175.337718813 13192.0302886, 15176.337718813 13192.0302886, 15178.337718813 13192.0302886, 15180.337718813 13192.0302886, 15181.337718813 13192.0302886, 15183.337718813 13193.0302886, 15187.337718813 13194.0302886, 15188.337718813 13194.0302886, 15189.337718813 13195.0302886, 15192.337718813 13196.0302886, 15193.337718813 13198.0302886, 15194.337718813 13200.0302886, 15195.337718813 13202.0302886, 15196.337718813 13203.0302886, 15196.337718813 13205.0302886, 15197.337718813 13207.0302886, 15197.337718813 13209.0302886, 15197.337718813 13210.0302886, 15197.337718813 13211.0302886, 15196.337718813 13213.0302886, 15196.337718813 13214.0302886, 15196.337718813 13215.0302886, 15196.337718813 13216.0302886, 15195.337718813 13217.0302886, 15191.337718813 13221.0302886, 15190.337718813 13222.0302886, 15184.337718813 13223.0302886, 15182.337718813 13223.0302886, 15179.337718813 13223.0302886, 15172.337718813 13221.0302886, 15170.337718813 13220.0302886, 15167.337718813 13218.0302886, 15165.337718813 13214.0302886, 15165.337718813 13212.0302886, 15165.337718813 13210.0302886, 15165.337718813 13209.0302886, 15165.337718813 13207.0302886, 15166.337718813 13206.0302886))"

        def form3 = "POLYGON ((15256 13406, 15254 13404, 15254 13400, 15258 13396, 15258 13392, 15260 13390, 15260 13382, 15264 13378, 15262 13376, 15270 13368, 15272 13368, 15274 13366, 15276 13366, 15280 13362, 15282 13362, 15286 13358, 15286 13348, 15282 13344, 15278 13348, 15274 13348, 15272 13350, 15270 13350, 15264 13356, 15262 13354, 15262 13348, 15264 13346, 15268 13346, 15270 13344, 15272 13344, 15274 13342, 15284 13342, 15286 13340, 15288 13340, 15290 13338, 15292 13338, 15296 13334, 15296 13332, 15298 13330, 15298 13326, 15302 13326, 15306 13322, 15304 13320, 15304 13314, 15306 13314, 15308 13312, 15304 13308, 15304 13304, 15302 13302, 15302 13300, 15300 13298, 15296 13298, 15294 13300, 15288 13300, 15286 13298, 15284 13298, 15282 13296, 15278 13296, 15276 13294, 15272 13294, 15270 13292, 15268 13294, 15264 13290, 15266 13288, 15270 13288, 15272 13286, 15274 13286, 15276 13284, 15278 13284, 15280 13282, 15282 13282, 15284 13280, 15286 13280, 15290 13276, 15292 13276, 15294 13274, 15296 13274, 15298 13272, 15298 13264, 15296 13262, 15296 13250, 15298 13250, 15298 13254, 15302 13258, 15306 13258, 15306 13260, 15308 13262, 15308 13264, 15306 13266, 15306 13268, 15298 13276, 15298 13278, 15300 13280, 15302 13280, 15304 13282, 15306 13282, 15310 13278, 15312 13278, 15310 13280, 15308 13280, 15306 13282, 15306 13286, 15304 13288, 15304 13290, 15302 13292, 15302 13296, 15304 13298, 15308 13298, 15310 13296, 15310 13294, 15312 13292, 15312 13290, 15314 13288, 15320 13288, 15324 13292, 15324 13294, 15326 13296, 15326 13298, 15330 13302, 15338 13294, 15340 13294, 15342 13292, 15344 13292, 15346 13290, 15350 13290, 15354 13286, 15354 13284, 15356 13282, 15358 13282, 15360 13280, 15360 13278, 15358 13276, 15356 13276, 15354 13274, 15354 13272, 15356 13270, 15356 13268, 15360 13264, 15360 13260, 15358 13258, 15358 13256, 15362 13260, 15362 13268, 15360 13270, 15360 13274, 15362 13276, 15362 13280, 15360 13280, 15358 13282, 15358 13294, 15356 13294, 15354 13296, 15354 13300, 15352 13302, 15352 13304, 15348 13308, 15342 13308, 15340 13306, 15334 13306, 15330 13302, 15324 13308, 15322 13308, 15320 13310, 15320 13312, 15318 13312, 15316 13314, 15316 13322, 15318 13324, 15320 13324, 15322 13326, 15324 13326, 15326 13328, 15328 13326, 15330 13326, 15332 13328, 15338 13328, 15344 13322, 15344 13320, 15346 13318, 15346 13314, 15358 13314, 15358 13320, 15360 13322, 15362 13322, 15364 13320, 15364 13316, 15366 13314, 15364 13312, 15364 13308, 15366 13306, 15366 13304, 15368 13302, 15370 13304, 15370 13306, 15372 13308, 15374 13308, 15378 13304, 15378 13302, 15380 13300, 15380 13286, 15382 13284, 15382 13276, 15384 13274, 15384 13270, 15386 13268, 15388 13268, 15394 13274, 15398 13270, 15398 13264, 15394 13260, 15386 13260, 15376 13250, 15374 13252, 15374 13246, 15372 13244, 15372 13242, 15370 13240, 15370 13238, 15368 13236, 15370 13234, 15372 13234, 15376 13230, 15376 13220, 15372 13216, 15368 13216, 15366 13214, 15360 13214, 15360 13192, 15364 13192, 15366 13190, 15366 13186, 15388 13186, 15390 13188, 15390 13190, 15394 13194, 15402 13194, 15408 13188, 15404 13184, 15402 13184, 15400 13182, 15400 13180, 15394 13174, 15392 13174, 15390 13172, 15386 13172, 15384 13174, 15378 13174, 15376 13176, 15370 13176, 15368 13178, 15366 13176, 15364 13178, 15364 13176, 15362 13174, 15360 13176, 15360 13168, 15358 13166, 15356 13168, 15352 13164, 15352 13162, 15348 13158, 15344 13162, 15344 13164, 15342 13166, 15342 13184, 15336 13184, 15336 13162, 15334 13160, 15334 13158, 15328 13152, 15312 13152, 15312 13150, 15310 13148, 15310 13144, 15308 13142, 15308 13140, 15306 13138, 15306 13136, 15304 13134, 15304 13130, 15302 13128, 15302 13118, 15294 13110, 15294 13108, 15296 13106, 15296 13100, 15298 13100, 15300 13098, 15312 13098, 15316 13102, 15316 13104, 15318 13106, 15318 13108, 15320 13110, 15320 13114, 15322 13116, 15322 13120, 15320 13120, 15316 13124, 15316 13126, 15320 13130, 15324 13130, 15328 13126, 15328 13120, 15326 13118, 15328 13116, 15328 13106, 15330 13104, 15330 13102, 15328 13100, 15328 13084, 15332 13080, 15332 13078, 15334 13076, 15334 13072, 15336 13070, 15336 13066, 15334 13064, 15334 13058, 15336 13058, 15338 13056, 15342 13056, 15342 13066, 15344 13068, 15344 13070, 15346 13072, 15346 13074, 15352 13080, 15354 13080, 15356 13078, 15366 13078, 15368 13080, 15370 13080, 15370 13084, 15368 13086, 15368 13088, 15370 13090, 15374 13090, 15376 13092, 15374 13092, 15366 13100, 15362 13100, 15360 13102, 15354 13102, 15352 13104, 15348 13104, 15346 13106, 15346 13110, 15348 13112, 15354 13112, 15356 13114, 15358 13114, 15358 13124, 15360 13126, 15362 13124, 15362 13128, 15364 13130, 15366 13128, 15366 13144, 15364 13146, 15364 13152, 15360 13152, 15358 13154, 15358 13158, 15360 13160, 15362 13160, 15364 13162, 15366 13160, 15374 13160, 15380 13154, 15380 13140, 15376 13136, 15376 13130, 15374 13128, 15372 13128, 15372 13126, 15370 13124, 15368 13124, 15374 13124, 15376 13122, 15376 13118, 15378 13116, 15378 13114, 15380 13112, 15382 13112, 15386 13108, 15388 13108, 15390 13106, 15390 13100, 15392 13098, 15392 13092, 15388 13088, 15384 13088, 15384 13086, 15382 13084, 15380 13084, 15380 13080, 15382 13080, 15384 13078, 15388 13078, 15390 13076, 15390 13074, 15388 13072, 15384 13072, 15382 13070, 15376 13070, 15374 13068, 15364 13068, 15364 13066, 15362 13064, 15356 13064, 15356 13062, 15354 13060, 15354 13058, 15358 13058, 15358 13062, 15360 13064, 15366 13058, 15368 13058, 15370 13056, 15370 13048, 15368 13046, 15368 13004, 15364 13000, 15362 13000, 15360 12998, 15360 12994, 15358 12992, 15352 12992, 15348 12996, 15346 12996, 15344 12998, 15342 12998, 15340 13000, 15340 12998, 15338 12996, 15336 12996, 15336 12990, 15338 12992, 15340 12990, 15340 12976, 15342 12974, 15342 12972, 15344 12974, 15346 12974, 15350 12978, 15350 12980, 15354 12984, 15356 12984, 15358 12986, 15360 12984, 15360 12976, 15362 12976, 15368 12970, 15368 12968, 15370 12966, 15370 12964, 15372 12964, 15372 12966, 15374 12968, 15374 12972, 15376 12974, 15376 12976, 15382 12982, 15382 12984, 15384 12986, 15384 12988, 15386 12990, 15384 12990, 15382 12992, 15376 12992, 15374 12994, 15374 12996, 15378 13000, 15380 13000, 15386 13006, 15388 13006, 15390 13008, 15390 13020, 15388 13018, 15388 13016, 15384 13012, 15378 13018, 15378 13022, 15376 13024, 15376 13030, 15378 13032, 15378 13034, 15384 13040, 15384 13042, 15386 13044, 15390 13044, 15392 13042, 15396 13042, 15398 13040, 15406 13040, 15408 13042, 15410 13042, 15414 13046, 15416 13046, 15416 13048, 15414 13050, 15414 13052, 15410 13056, 15406 13056, 15404 13058, 15400 13058, 15392 13066, 15392 13068, 15396 13072, 15398 13072, 15398 13074, 15400 13076, 15402 13074, 15402 13072, 15408 13072, 15410 13070, 15420 13070, 15428 13078, 15430 13078, 15432 13080, 15436 13076, 15436 13074, 15438 13072, 15438 13066, 15436 13064, 15436 13058, 15434 13056, 15432 13056, 15434 13056, 15436 13054, 15438 13054, 15444 13048, 15444 13044, 15440 13040, 15438 13040, 15436 13038, 15426 13038, 15424 13036, 15424 13034, 15422 13032, 15420 13032, 15418 13030, 15416 13030, 15414 13028, 15400 13028, 15400 13026, 15406 13026, 15408 13024, 15408 13016, 15404 13012, 15404 13010, 15400 13006, 15400 13004, 15398 13002, 15398 12996, 15394 12992, 15392 12992, 15392 12974, 15390 12972, 15390 12970, 15388 12968, 15388 12966, 15386 12964, 15388 12962, 15406 12962, 15406 12964, 15408 12966, 15410 12966, 15412 12968, 15414 12968, 15414 12970, 15416 12972, 15420 12972, 15416 12972, 15414 12974, 15414 12976, 15408 12976, 15406 12978, 15404 12978, 15402 12980, 15402 12982, 15400 12984, 15402 12986, 15402 12990, 15404 12992, 15412 12992, 15414 12994, 15414 13010, 15418 13014, 15426 13014, 15428 13016, 15430 13016, 15434 13020, 15434 13022, 15438 13026, 15442 13026, 15440 13028, 15442 13030, 15448 13030, 15450 13032, 15452 13032, 15454 13030, 15454 13028, 15456 13026, 15456 13024, 15454 13022, 15454 13018, 15452 13016, 15444 13016, 15438 13010, 15438 13008, 15430 13000, 15426 13000, 15426 12996, 15424 12994, 15424 12992, 15422 12990, 15422 12988, 15424 12986, 15424 12978, 15426 12978, 15428 12980, 15430 12980, 15432 12982, 15438 12982, 15440 12980, 15440 12978, 15442 12978, 15444 12976, 15446 12976, 15448 12974, 15450 12976, 15456 12970, 15456 12968, 15458 12966, 15458 12954, 15454 12950, 15454 12944, 15458 12944, 15460 12946, 15466 12946, 15468 12944, 15468 12942, 15470 12942, 15472 12940, 15474 12940, 15476 12938, 15474 12936, 15474 12934, 15470 12930, 15470 12928, 15468 12926, 15468 12922, 15466 12920, 15466 12916, 15464 12914, 15464 12912, 15466 12910, 15466 12906, 15468 12904, 15468 12900, 15484 12900, 15486 12902, 15488 12900, 15526 12900, 15526 12904, 15522 12908, 15522 12910, 15520 12912, 15520 12920, 15522 12922, 15524 12920, 15526 12920, 15528 12918, 15530 12918, 15534 12914, 15534 12900, 15658 12900, 15658 12904, 15656 12906, 15658 12908, 15658 12912, 15656 12914, 15656 12918, 15654 12920, 15652 12918, 15652 12916, 15648 12912, 15644 12916, 15644 12918, 15642 12920, 15644 12922, 15644 12926, 15648 12930, 15652 12930, 15652 12932, 15656 12936, 15658 12936, 15660 12938, 15662 12938, 15666 12934, 15666 12930, 15670 12926, 15668 12924, 15668 12918, 15666 12916, 15666 12910, 15664 12908, 15664 12900, 15688 12900, 15688 12988, 15686 12990, 15686 12992, 15688 12994, 15688 13000, 15684 13000, 15684 12996, 15682 12994, 15680 12996, 15680 13004, 15682 13006, 15684 13006, 15686 13008, 15686 13010, 15688 13012, 15688 13124, 15686 13124, 15684 13126, 15684 13130, 15680 13134, 15680 13138, 15682 13140, 15682 13144, 15684 13146, 15684 13148, 15688 13152, 15688 13176, 15686 13178, 15686 13180, 15684 13182, 15684 13184, 15686 13186, 15688 13186, 15688 13196, 15682 13196, 15680 13198, 15680 13202, 15674 13208, 15674 13214, 15676 13216, 15678 13216, 15680 13214, 15680 13210, 15682 13210, 15684 13208, 15686 13210, 15688 13210, 15688 13216, 15684 13220, 15684 13224, 15686 13226, 15686 13230, 15688 13232, 15688 13304, 15686 13306, 15686 13308, 15684 13308, 15684 13306, 15682 13304, 15678 13304, 15676 13306, 15676 13312, 15674 13314, 15674 13316, 15672 13318, 15672 13320, 15670 13320, 15670 13314, 15668 13312, 15660 13312, 15658 13314, 15658 13332, 15660 13334, 15662 13332, 15664 13332, 15662 13334, 15666 13338, 15666 13344, 15664 13344, 15662 13346, 15662 13348, 15656 13348, 15654 13350, 15654 13356, 15652 13354, 15650 13356, 15648 13356, 15646 13358, 15646 13360, 15644 13362, 15644 13364, 15642 13364, 15634 13372, 15634 13374, 15628 13380, 15628 13384, 15630 13386, 15632 13384, 15632 13388, 15630 13390, 15630 13394, 15632 13396, 15632 13406, 15480 13406, 15480 13404, 15478 13402, 15476 13404, 15474 13404, 15472 13406, 15456 13406, 15456 13402, 15454 13400, 15450 13400, 15448 13402, 15448 13404, 15446 13406, 15364 13406, 15366 13404, 15366 13402, 15368 13400, 15368 13398, 15366 13396, 15366 13394, 15364 13392, 15360 13392, 15360 13390, 15356 13386, 15354 13386, 15352 13384, 15350 13384, 15346 13380, 15346 13378, 15348 13378, 15352 13374, 15352 13370, 15350 13368, 15344 13368, 15340 13372, 15338 13372, 15334 13376, 15330 13376, 15326 13380, 15326 13382, 15328 13384, 15328 13388, 15330 13390, 15332 13390, 15336 13394, 15338 13394, 15340 13396, 15340 13398, 15338 13400, 15336 13400, 15334 13402, 15332 13402, 15330 13404, 15328 13402, 15328 13400, 15322 13394, 15320 13394, 15318 13392, 15318 13390, 15316 13388, 15316 13382, 15320 13378, 15322 13378, 15326 13374, 15326 13370, 15328 13368, 15328 13358, 15330 13356, 15330 13354, 15332 13354, 15334 13352, 15334 13350, 15336 13348, 15336 13346, 15344 13346, 15346 13348, 15352 13348, 15354 13346, 15358 13346, 15360 13344, 15360 13342, 15354 13336, 15352 13338, 15350 13336, 15344 13336, 15342 13338, 15340 13338, 15338 13340, 15336 13340, 15334 13342, 15332 13342, 15330 13340, 15328 13340, 15326 13342, 15322 13338, 15318 13338, 15316 13336, 15308 13336, 15306 13338, 15304 13338, 15302 13340, 15302 13342, 15300 13344, 15298 13344, 15294 13348, 15296 13350, 15296 13358, 15298 13360, 15300 13358, 15302 13358, 15304 13356, 15304 13348, 15306 13346, 15308 13348, 15308 13352, 15304 13356, 15304 13358, 15302 13360, 15302 13370, 15304 13372, 15304 13374, 15302 13376, 15302 13378, 15296 13384, 15296 13380, 15294 13378, 15292 13380, 15292 13382, 15290 13384, 15290 13386, 15292 13388, 15294 13388, 15294 13390, 15304 13400, 15306 13400, 15308 13402, 15310 13402, 15314 13406, 15256 13406), (15648 12902, 15650 12904, 15652 12902, 15650 12900, 15648 12902), (15634 12924, 15636 12926, 15638 12926, 15640 12924, 15638 12922, 15638 12918, 15636 12916, 15634 12918, 15634 12924), (15480 12928, 15482 12930, 15486 12930, 15488 12928, 15488 12920, 15490 12918, 15490 12910, 15488 12908, 15488 12906, 15486 12904, 15484 12906, 15484 12908, 15482 12910, 15482 12922, 15480 12924, 15480 12928), (15520 12930, 15522 12932, 15524 12930, 15522 12928, 15520 12930), (15680 12932, 15682 12934, 15686 12934, 15688 12932, 15686 12930, 15682 12930, 15680 12932), (15476 12942, 15478 12944, 15480 12942, 15478 12940, 15476 12942), (15590 12950, 15592 12952, 15594 12950, 15592 12948, 15590 12950), (15624 12956, 15626 12958, 15628 12958, 15630 12956, 15630 12952, 15632 12950, 15632 12944, 15634 12942, 15634 12932, 15632 12930, 15626 12930, 15624 12932, 15624 12956), (15594 12958, 15596 12960, 15598 12958, 15596 12956, 15594 12958), (15622 12968, 15624 12970, 15626 12968, 15624 12966, 15622 12968), (15536 12980, 15538 12982, 15540 12980, 15538 12978, 15536 12980), (15540 12984, 15542 12986, 15544 12984, 15542 12982, 15540 12984), (15604 12988, 15606 12988, 15608 12986, 15608 12984, 15606 12982, 15602 12982, 15600 12984, 15604 12988), (15394 12990, 15396 12992, 15398 12990, 15396 12988, 15394 12990), (15358 12992, 15360 12994, 15374 12994, 15376 12992, 15376 12982, 15374 12980, 15364 12980, 15358 12986, 15358 12992), (15464 13014, 15468 13010, 15468 12994, 15466 12992, 15464 12992, 15464 12990, 15462 12988, 15462 12986, 15458 12982, 15458 12980, 15456 12978, 15450 12984, 15450 12986, 15448 12988, 15448 12990, 15452 12994, 15458 12994, 15458 13006, 15460 13008, 15460 13010, 15464 13014), (15520 13026, 15522 13028, 15526 13028, 15530 13024, 15530 13020, 15534 13016, 15536 13016, 15538 13014, 15540 13014, 15544 13010, 15544 13006, 15540 13002, 15538 13002, 15536 13000, 15532 13000, 15534 12998, 15534 12996, 15532 12994, 15530 12996, 15526 12992, 15522 12992, 15518 12996, 15518 13004, 15516 13006, 15516 13008, 15514 13010, 15514 13018, 15516 13020, 15516 13024, 15518 13026, 15520 13026), (15624 13028, 15626 13030, 15628 13030, 15630 13028, 15628 13026, 15626 13026, 15624 13028), (15656 13034, 15660 13030, 15660 13024, 15658 13022, 15658 13020, 15656 13018, 15654 13018, 15650 13022, 15650 13028, 15656 13034), (15596 13032, 15598 13034, 15600 13032, 15598 13030, 15596 13032), (15592 13034, 15594 13036, 15596 13034, 15594 13032, 15592 13034), (15588 13038, 15590 13040, 15592 13038, 15590 13036, 15588 13038), (15510 13042, 15512 13044, 15514 13042, 15514 13040, 15516 13038, 15512 13034, 15510 13036, 15510 13042), (15646 13056, 15648 13058, 15652 13054, 15652 13050, 15650 13048, 15648 13050, 15648 13052, 15646 13054, 15646 13056), (15574 13078, 15576 13080, 15578 13080, 15580 13078, 15580 13068, 15578 13066, 15576 13066, 15574 13068, 15574 13078), (15432 13080, 15434 13082, 15436 13080, 15434 13078, 15432 13080), (15602 13084, 15604 13086, 15608 13082, 15608 13080, 15612 13076, 15612 13072, 15614 13070, 15614 13068, 15620 13062, 15620 13054, 15618 13052, 15618 13050, 15616 13048, 15616 13040, 15618 13038, 15614 13034, 15614 13030, 15612 13028, 15612 13026, 15610 13024, 15606 13024, 15604 13026, 15602 13026, 15600 13028, 15600 13032, 15596 13036, 15594 13036, 15590 13040, 15590 13046, 15596 13052, 15600 13052, 15600 13054, 15602 13056, 15602 13072, 15600 13074, 15600 13080, 15602 13082, 15602 13084), (15366 13084, 15368 13086, 15370 13084, 15368 13082, 15366 13084), (15528 13088, 15530 13090, 15534 13090, 15536 13088, 15536 13080, 15538 13078, 15538 13072, 15536 13070, 15538 13068, 15538 13066, 15536 13064, 15536 13060, 15532 13056, 15530 13056, 15526 13060, 15526 13078, 15528 13080, 15528 13088), (15486 13090, 15488 13092, 15490 13090, 15490 13088, 15488 13086, 15486 13088, 15486 13090), (15394 13092, 15396 13090, 15398 13090, 15402 13086, 15398 13082, 15392 13082, 15390 13084, 15390 13088, 15394 13092), (15616 13092, 15618 13094, 15620 13092, 15618 13090, 15616 13092), (15506 13092, 15508 13094, 15510 13094, 15512 13092, 15512 13090, 15510 13088, 15508 13088, 15506 13090, 15506 13092), (15626 13098, 15628 13096, 15628 13090, 15626 13088, 15624 13088, 15622 13090, 15622 13094, 15626 13098), (15450 13100, 15452 13102, 15454 13100, 15454 13096, 15456 13094, 15456 13090, 15454 13088, 15452 13088, 15450 13090, 15450 13100), (15668 13104, 15670 13106, 15674 13106, 15676 13104, 15676 13096, 15674 13094, 15674 13092, 15672 13090, 15672 13082, 15674 13080, 15670 13076, 15668 13076, 15666 13078, 15666 13080, 15662 13080, 15660 13082, 15658 13080, 15654 13084, 15654 13088, 15656 13090, 15656 13092, 15664 13100, 15664 13102, 15666 13104, 15668 13104), (15596 13108, 15598 13110, 15600 13108, 15598 13106, 15596 13108), (15580 13108, 15582 13110, 15584 13110, 15586 13108, 15588 13110, 15594 13104, 15594 13102, 15596 13100, 15598 13100, 15604 13094, 15604 13090, 15602 13088, 15594 13088, 15592 13090, 15592 13096, 15590 13096, 15588 13098, 15584 13098, 15584 13094, 15580 13090, 15578 13092, 15578 13096, 15576 13098, 15580 13102, 15580 13108), (15574 13112, 15576 13114, 15578 13112, 15576 13110, 15574 13112), (15678 13114, 15680 13116, 15682 13116, 15684 13114, 15684 13110, 15682 13108, 15682 13106, 15680 13104, 15678 13106, 15678 13114), (15574 13116, 15576 13118, 15578 13116, 15576 13114, 15574 13116), (15472 13116, 15474 13118, 15478 13114, 15478 13110, 15480 13108, 15480 13100, 15478 13098, 15472 13104, 15472 13116), (15438 13120, 15440 13122, 15442 13122, 15450 13114, 15448 13112, 15448 13108, 15446 13106, 15444 13108, 15442 13108, 15440 13110, 15440 13112, 15438 13114, 15438 13120), (15614 13122, 15616 13124, 15618 13122, 15616 13120, 15614 13122), (15668 13124, 15670 13126, 15672 13124, 15672 13122, 15670 13120, 15668 13122, 15668 13124), (15542 13124, 15544 13126, 15546 13126, 15548 13124, 15546 13122, 15544 13122, 15542 13124), (15544 13130, 15546 13132, 15548 13130, 15548 13128, 15546 13126, 15544 13128, 15544 13130), (15582 13138, 15584 13136, 15584 13134, 15582 13132, 15580 13132, 15578 13134, 15582 13138), (15338 13136, 15340 13138, 15342 13136, 15340 13134, 15338 13136), (15476 13138, 15478 13140, 15480 13138, 15478 13136, 15476 13138), (15440 13138, 15442 13140, 15444 13138, 15442 13136, 15440 13138), (15674 13140, 15676 13142, 15678 13142, 15680 13140, 15680 13132, 15678 13130, 15678 13124, 15676 13122, 15674 13122, 15672 13124, 15672 13126, 15674 13128, 15674 13140), (15516 13142, 15518 13144, 15520 13142, 15518 13140, 15516 13142), (15398 13144, 15400 13146, 15404 13146, 15408 13142, 15410 13142, 15412 13140, 15414 13140, 15416 13138, 15416 13136, 15418 13134, 15418 13128, 15420 13126, 15420 13122, 15422 13122, 15424 13120, 15424 13114, 15422 13112, 15422 13110, 15416 13104, 15416 13098, 15422 13098, 15424 13100, 15428 13100, 15430 13098, 15432 13098, 15434 13096, 15434 13092, 15430 13088, 15422 13088, 15420 13090, 15418 13088, 15412 13094, 15412 13098, 15410 13098, 15406 13102, 15406 13110, 15408 13112, 15408 13116, 15410 13118, 15406 13122, 15406 13124, 15404 13126, 15406 13128, 15404 13130, 15404 13136, 15402 13136, 15400 13138, 15400 13140, 15398 13142, 15398 13144), (15472 13148, 15474 13150, 15476 13148, 15476 13146, 15478 13144, 15478 13140, 15476 13138, 15472 13142, 15472 13148), (15584 13150, 15586 13152, 15588 13150, 15588 13148, 15590 13148, 15596 13142, 15596 13138, 15598 13136, 15598 13134, 15602 13130, 15602 13128, 15604 13128, 15608 13124, 15608 13116, 15604 13112, 15600 13112, 15596 13116, 15596 13122, 15594 13124, 15594 13130, 15592 13132, 15592 13134, 15590 13134, 15588 13136, 15588 13138, 15586 13138, 15582 13142, 15582 13144, 15584 13146, 15584 13150), (15348 13154, 15356 13146, 15356 13144, 15358 13144, 15360 13142, 15360 13138, 15356 13134, 15354 13134, 15352 13132, 15346 13132, 15338 13140, 15340 13142, 15340 13144, 15342 13146, 15342 13148, 15348 13154), (15576 13156, 15578 13158, 15580 13156, 15578 13154, 15576 13156), (15664 13160, 15666 13160, 15672 13154, 15672 13146, 15670 13144, 15666 13148, 15666 13150, 15660 13156, 15664 13160), (15462 13162, 15464 13164, 15466 13162, 15464 13160, 15462 13162), (15432 13164, 15434 13166, 15436 13164, 15434 13162, 15432 13164), (15580 13166, 15582 13168, 15588 13162, 15588 13154, 15586 13152, 15584 13152, 15582 13154, 15582 13156, 15580 13158, 15580 13166), (15426 13166, 15428 13168, 15432 13164, 15430 13162, 15428 13162, 15426 13164, 15426 13166), (15640 13170, 15642 13172, 15644 13172, 15646 13170, 15644 13168, 15642 13168, 15640 13170), (15462 13170, 15464 13172, 15466 13170, 15464 13168, 15462 13170), (15546 13184, 15548 13186, 15550 13184, 15550 13182, 15548 13180, 15546 13182, 15546 13184), (15430 13188, 15432 13190, 15434 13190, 15436 13188, 15434 13186, 15432 13186, 15430 13188), (15376 13188, 15378 13190, 15380 13188, 15378 13186, 15376 13188), (15562 13192, 15564 13194, 15566 13192, 15564 13190, 15562 13192), (15618 13200, 15620 13202, 15622 13200, 15620 13198, 15618 13200), (15554 13208, 15556 13210, 15558 13208, 15556 13206, 15554 13208), (15626 13214, 15628 13216, 15630 13216, 15632 13214, 15632 13188, 15634 13186, 15636 13186, 15638 13184, 15638 13176, 15636 13174, 15634 13176, 15632 13176, 15630 13178, 15628 13178, 15622 13184, 15622 13198, 15624 13200, 15624 13204, 15626 13206, 15626 13214), (15600 13218, 15602 13218, 15606 13214, 15606 13208, 15604 13206, 15604 13204, 15606 13202, 15606 13196, 15608 13194, 15608 13190, 15610 13188, 15610 13186, 15612 13186, 15614 13184, 15616 13184, 15618 13182, 15618 13166, 15620 13164, 15620 13158, 15622 13156, 15618 13152, 15612 13152, 15608 13156, 15608 13166, 15606 13168, 15606 13170, 15604 13172, 15604 13174, 15602 13176, 15600 13176, 15596 13180, 15596 13214, 15600 13218), (15636 13228, 15640 13224, 15638 13222, 15638 13220, 15636 13218, 15634 13220, 15634 13222, 15632 13224, 15636 13228), (15478 13228, 15480 13230, 15482 13228, 15480 13226, 15478 13228), (15616 13230, 15618 13232, 15620 13230, 15620 13222, 15618 13220, 15616 13222, 15616 13230), (15384 13230, 15386 13232, 15390 13232, 15394 13228, 15396 13228, 15400 13224, 15400 13222, 15402 13220, 15398 13216, 15392 13216, 15392 13212, 15388 13208, 15384 13208, 15382 13206, 15382 13202, 15384 13200, 15384 13198, 15382 13196, 15382 13194, 15378 13190, 15366 13190, 15364 13192, 15366 13194, 15366 13202, 15370 13206, 15370 13208, 15374 13212, 15376 13212, 15378 13214, 15378 13216, 15384 13222, 15384 13230), (15504 13232, 15506 13234, 15508 13234, 15510 13232, 15510 13220, 15506 13216, 15502 13220, 15502 13228, 15504 13230, 15504 13232), (15614 13244, 15616 13242, 15616 13240, 15614 13238, 15616 13236, 15614 13234, 15612 13234, 15610 13232, 15608 13234, 15608 13236, 15610 13238, 15610 13240, 15614 13244), (15542 13244, 15544 13246, 15546 13244, 15544 13242, 15542 13244), (15614 13246, 15616 13248, 15622 13248, 15624 13246, 15620 13242, 15616 13242, 15614 13244, 15614 13246), (15566 13248, 15568 13246, 15570 13246, 15572 13244, 15572 13238, 15574 13236, 15574 13222, 15576 13220, 15578 13220, 15580 13222, 15582 13220, 15582 13206, 15584 13204, 15584 13192, 15582 13190, 15582 13188, 15580 13186, 15578 13188, 15578 13190, 15576 13192, 15576 13194, 15574 13196, 15574 13198, 15572 13198, 15570 13200, 15570 13202, 15568 13202, 15566 13204, 15566 13206, 15568 13208, 15568 13218, 15564 13222, 15564 13224, 15562 13226, 15562 13244, 15566 13248), (15376 13250, 15378 13252, 15380 13250, 15378 13248, 15376 13250), (15566 13254, 15568 13256, 15570 13254, 15568 13252, 15566 13254), (15542 13258, 15544 13260, 15546 13258, 15544 13256, 15542 13258), (15538 13258, 15540 13260, 15542 13258, 15540 13256, 15538 13258), (15486 13260, 15488 13260, 15490 13258, 15490 13256, 15492 13254, 15492 13250, 15490 13248, 15490 13246, 15488 13244, 15488 13238, 15486 13236, 15484 13238, 15484 13240, 15482 13242, 15482 13244, 15480 13246, 15480 13254, 15486 13260), (15680 13262, 15682 13264, 15686 13260, 15686 13256, 15682 13252, 15680 13254, 15680 13262), (15446 13282, 15448 13284, 15450 13282, 15448 13280, 15446 13282), (15658 13292, 15660 13294, 15662 13294, 15664 13292, 15666 13292, 15672 13286, 15672 13284, 15670 13282, 15670 13280, 15668 13278, 15668 13274, 15670 13272, 15670 13268, 15666 13264, 15662 13268, 15662 13270, 15660 13272, 15658 13272, 15656 13274, 15656 13278, 15654 13280, 15654 13282, 15652 13284, 15652 13286, 15654 13288, 15654 13290, 15656 13292, 15658 13292), (15614 13300, 15616 13298, 15622 13298, 15624 13296, 15624 13284, 15628 13284, 15630 13282, 15630 13280, 15632 13278, 15632 13276, 15634 13274, 15634 13272, 15636 13270, 15636 13264, 15634 13262, 15634 13260, 15632 13258, 15622 13258, 15620 13260, 15616 13260, 15614 13258, 15614 13252, 15612 13250, 15610 13252, 15610 13262, 15608 13264, 15610 13266, 15610 13278, 15608 13280, 15608 13288, 15606 13290, 15608 13292, 15608 13294, 15614 13300), (15584 13302, 15586 13304, 15588 13302, 15588 13294, 15586 13292, 15584 13294, 15584 13302), (15508 13304, 15510 13304, 15512 13302, 15512 13300, 15514 13298, 15514 13296, 15516 13294, 15516 13282, 15518 13284, 15518 13286, 15520 13288, 15524 13284, 15524 13278, 15526 13280, 15530 13280, 15532 13282, 15532 13286, 15534 13288, 15534 13290, 15536 13292, 15542 13292, 15544 13290, 15544 13288, 15548 13284, 15548 13282, 15550 13282, 15554 13278, 15554 13276, 15556 13274, 15556 13272, 15560 13268, 15560 13264, 15562 13262, 15562 13260, 15558 13256, 15554 13256, 15548 13262, 15546 13260, 15538 13260, 15536 13258, 15534 13258, 15530 13254, 15530 13250, 15534 13250, 15536 13248, 15538 13248, 15540 13246, 15540 13238, 15542 13236, 15542 13232, 15544 13230, 15544 13228, 15546 13228, 15552 13222, 15552 13216, 15550 13214, 15550 13208, 15548 13206, 15548 13204, 15552 13208, 15554 13208, 15556 13206, 15558 13206, 15560 13204, 15564 13204, 15566 13202, 15564 13200, 15564 13196, 15560 13192, 15560 13188, 15558 13186, 15550 13186, 15548 13188, 15546 13188, 15544 13190, 15544 13192, 15540 13196, 15540 13204, 15538 13206, 15538 13210, 15536 13212, 15536 13214, 15540 13218, 15540 13222, 15538 13224, 15536 13224, 15534 13226, 15532 13226, 15530 13228, 15530 13242, 15526 13246, 15522 13246, 15516 13252, 15516 13262, 15514 13264, 15514 13266, 15512 13268, 15512 13280, 15508 13284, 15508 13286, 15506 13288, 15506 13290, 15504 13292, 15504 13300, 15508 13304), (15444 13308, 15446 13310, 15448 13310, 15452 13306, 15452 13304, 15454 13302, 15454 13294, 15448 13288, 15446 13288, 15444 13290, 15444 13308), (15416 13312, 15418 13314, 15420 13314, 15422 13312, 15422 13306, 15420 13304, 15418 13306, 15418 13308, 15416 13310, 15416 13312), (15584 13316, 15586 13318, 15588 13316, 15588 13314, 15586 13312, 15584 13314, 15584 13316), (15616 13318, 15618 13320, 15620 13318, 15620 13314, 15618 13312, 15616 13314, 15616 13318), (15398 13318, 15400 13320, 15402 13318, 15400 13316, 15398 13318), (15390 13318, 15392 13320, 15394 13320, 15396 13318, 15396 13316, 15400 13312, 15400 13302, 15398 13300, 15398 13296, 15396 13294, 15396 13290, 15394 13288, 15392 13290, 15392 13296, 15390 13298, 15390 13318), (15640 13332, 15642 13334, 15644 13334, 15646 13332, 15646 13328, 15648 13326, 15644 13322, 15640 13326, 15640 13332), (15310 13332, 15312 13334, 15314 13332, 15312 13330, 15310 13332), (15606 13336, 15608 13338, 15612 13338, 15614 13336, 15614 13328, 15612 13326, 15608 13326, 15606 13328, 15606 13336), (15650 13346, 15652 13348, 15658 13348, 15660 13346, 15660 13336, 15658 13334, 15658 13332, 15656 13330, 15654 13332, 15652 13332, 15650 13334, 15650 13346), (15450 13358, 15452 13360, 15454 13358, 15454 13356, 15456 13354, 15454 13352, 15452 13352, 15450 13354, 15450 13358), (15528 13362, 15530 13364, 15532 13362, 15530 13360, 15528 13362), (15486 13362, 15488 13364, 15490 13364, 15492 13362, 15492 13360, 15494 13358, 15494 13350, 15492 13348, 15492 13346, 15490 13344, 15484 13344, 15482 13346, 15482 13354, 15486 13358, 15486 13362), (15518 13370, 15520 13368, 15520 13360, 15518 13358, 15516 13358, 15514 13360, 15514 13366, 15518 13370), (15584 13376, 15586 13378, 15588 13378, 15592 13374, 15590 13372, 15586 13372, 15584 13374, 15584 13376), (15474 13378, 15476 13380, 15478 13380, 15480 13378, 15480 13370, 15478 13368, 15474 13372, 15474 13378), (15554 13384, 15556 13382, 15558 13382, 15562 13378, 15570 13378, 15572 13376, 15572 13366, 15570 13364, 15570 13360, 15568 13358, 15566 13358, 15564 13356, 15560 13356, 15560 13354, 15558 13352, 15556 13352, 15556 13348, 15552 13344, 15550 13344, 15550 13334, 15552 13332, 15552 13330, 15556 13330, 15560 13326, 15560 13324, 15564 13320, 15564 13314, 15568 13314, 15570 13312, 15570 13302, 15572 13300, 15572 13296, 15574 13294, 15574 13288, 15578 13284, 15580 13284, 15582 13282, 15586 13282, 15588 13280, 15588 13252, 15586 13250, 15584 13252, 15584 13268, 15582 13270, 15582 13272, 15580 13272, 15578 13274, 15578 13276, 15576 13278, 15576 13280, 15574 13280, 15568 13286, 15568 13288, 15564 13292, 15564 13298, 15562 13300, 15564 13302, 15562 13304, 15556 13304, 15550 13310, 15550 13312, 15540 13312, 15538 13314, 15538 13322, 15536 13324, 15536 13326, 15534 13328, 15534 13334, 15532 13336, 15532 13346, 15534 13348, 15530 13352, 15530 13360, 15532 13362, 15540 13362, 15544 13358, 15546 13360, 15548 13358, 15550 13360, 15552 13360, 15554 13362, 15554 13374, 15550 13378, 15550 13380, 15554 13384), (15330 13392, 15332 13394, 15334 13392, 15332 13390, 15330 13392), (15482 13396, 15484 13398, 15486 13396, 15486 13392, 15484 13390, 15482 13392, 15482 13396), (15566 13400, 15568 13400, 15572 13396, 15572 13384, 15570 13382, 15568 13382, 15562 13388, 15562 13396, 15566 13400), (15270 13406, 15276 13400, 15282 13400, 15284 13402, 15284 13404, 15286 13406, 15290 13406, 15292 13404, 15290 13402, 15292 13400, 15290 13398, 15290 13390, 15284 13384, 15284 13380, 15282 13378, 15278 13378, 15274 13382, 15274 13384, 15272 13384, 15270 13386, 15268 13384, 15268 13382, 15264 13378, 15262 13380, 15262 13384, 15264 13386, 15264 13396, 15266 13398, 15266 13402, 15270 13406))"

        def geom = new WKTReader().read(form3)

       println geom.numGeometries
       println geom.getNumInteriorRing()
//        println geom.toText();
//        println geom.toText().split("\\(");
//        println geom.toText().split("\\(").length;

        println geom.toText().split("\\(").length - 1;
       // geom.



    }

    def dataSource


    public ArrayList[] splitList(def list, long number) {
            //split indexCollection files list for each server
            ArrayList[] pictureByServer = new ArrayList[number];
            // initialize all your small ArrayList groups
            for (int i = 0; i < number; i++){
                pictureByServer[i] = new ArrayList();
            }

            double idx = 0d;
            double incrx = (double) ((double) number / (double) list.size());
            // put your results into those arrays
            for (int i = 0; i < list.size(); i++) {
                pictureByServer[(int) Math.floor(idx)].add(list.get(i));
                idx = idx + incrx;
            }
            return pictureByServer;
    }

    def multi() {

        def list = []

        (0..10000).each {
           //UserAnnotation annotation = BasicInstanceBuilder.getUserAnnotationNotExist(ImageInstance.read(16642l),User.read(16l),null)
           if(it%100==0) {
               cleanUpGorm()
           }
        }


        list = UserAnnotation.findAllByImage(ImageInstance.read(16642l))


        println "delete..."

        println "springSecurityService=$springSecurityService"
        println "principal=${springSecurityService.principal}"

        def listThread = []

        def listArray = splitList(list,10)

        listArray.eachWithIndex { l, i->

            def th = Thread.start {
                l.each {  annotation ->
                    println annotation.project.name
                   new Sql(dataSource).execute("delete from user_annotation where id=${annotation.id}",[])
                }


            }
            listThread << th
        }

        listThread.eachWithIndex { t,i->
            t.join()
            println "Thread $i is finished"
        }

    }

    def area() {
        println System.currentTimeMillis()
//        def projects = Project.list()

//        projects.eachWithIndex { project, pi ->
//            println "Annotation project $pi=${project.name}"
//            ReviewedAnnotation.findAllByProject(project).each {
//                try {
//                saveDomain(it)
//                }catch(Exception e) {
//                    println e
//                }
//            }
//            //cleanUpGorm()
//
//            UserAnnotation.findAllByProject(project).each {
//                try {
//                saveDomain(it)
//                }catch(Exception e) {
//                    println e
//                }
//            }
//            //cleanUpGorm()
//
//            AlgoAnnotation.findAllByProject(project).each {
//                try {
//                saveDomain(it)
//                }catch(Exception e) {
//                    println e
//                }
//            }
//           // cleanUpGorm()
//        }
//        println System.currentTimeMillis()

        Project.findAll().each { project ->
            ImageInstance.findAllByProject(project).each { image ->

                println "${project.name} Image ${image.baseImage.originalFilename}"


                if(image.baseImage.resolution==null) {
                   ReviewedAnnotation.executeUpdate("update ReviewedAnnotation set perimeterUnit = :punit, areaUnit = :aunit where image = :image",[punit:GisUtils.PIXELv,aunit:GisUtils.PIXELS2v,image:image])
                   AlgoAnnotation.executeUpdate("update AlgoAnnotation set perimeterUnit = :punit, areaUnit = :aunit where image = :image",[punit:GisUtils.PIXELv,aunit:GisUtils.PIXELS2v,image:image])
                   UserAnnotation.executeUpdate("update UserAnnotation set perimeterUnit = :punit, areaUnit = :aunit where image = :image",[punit:GisUtils.PIXELv,aunit:GisUtils.PIXELS2v,image:image])
                } else {
                    ReviewedAnnotation.executeUpdate("update ReviewedAnnotation set perimeterUnit = :punit, areaUnit = :aunit where image = :image",[punit:GisUtils.MMv,aunit:GisUtils.MICRON2v,image:image])
                    AlgoAnnotation.executeUpdate("update AlgoAnnotation set perimeterUnit = :punit, areaUnit = :aunit where image = :image",[punit:GisUtils.MMv,aunit:GisUtils.MICRON2v,image:image])
                    UserAnnotation.executeUpdate("update UserAnnotation set perimeterUnit = :punit, areaUnit = :aunit where image = :image",[punit:GisUtils.MMv,aunit:GisUtils.MICRON2v,image:image])
                }


                if(image.baseImage.resolution==null) {
                    new Sql(dataSource).executeUpdate('update reviewed_annotation set perimeter = round(ST_perimeter(location)), area = round(ST_area(location)) where image_id = ?', [image.id])
                    new Sql(dataSource).executeUpdate('update algo_annotation set perimeter = round(ST_perimeter(location)), area = round(ST_area(location)) where image_id = ?', [image.id])
                    new Sql(dataSource).executeUpdate('update user_annotation set perimeter = round(ST_perimeter(location)), area = round(ST_area(location)) where image_id = ?', [image.id])
                 } else {
                    new Sql(dataSource).executeUpdate('update reviewed_annotation set perimeter = round(ST_perimeter(location)*'+image.baseImage.resolution+'/1000), ' +
                            'area = round(ST_area(location)*'+(image.baseImage.resolution*image.baseImage.resolution)+') where image_id = ?', [image.id])
                    new Sql(dataSource).executeUpdate('update algo_annotation set perimeter = round(ST_perimeter(location)*'+image.baseImage.resolution+'/1000), ' +
                            'area = round(ST_area(location)*'+(image.baseImage.resolution*image.baseImage.resolution)+') where image_id = ?', [image.id])
                    new Sql(dataSource).executeUpdate('update user_annotation set perimeter = round(ST_perimeter(location)*'+image.baseImage.resolution+'/1000), ' +
                            'area = round(ST_area(location)*'+(image.baseImage.resolution*image.baseImage.resolution)+') where image_id = ?', [image.id])
                 }


//
//
//
//              if (image.resolution == null) {
//                  area = Math.round(this.location.getArea())
//                  perimeter = Math.round(this.location.getLength())
//              } else {
//                  area = Math.round(this.location.getArea() * image.resolution * image.resolution)
//                  perimeter = Math.round(this.location.getLength() * image.resolution / 1000)
//              }




            }


        }

    }


    def saveDomain(def newObject) {
        newObject.checkAlreadyExist()
        if (!newObject.validate()) {
            log.error newObject.errors
            log.error newObject.retrieveErrors().toString()
            throw new WrongArgumentException(newObject.retrieveErrors().toString())
        }
        if (!newObject.save(flush: true)) {
            throw new InvalidRequestException(newObject.retrieveErrors().toString())
        }
    }



    def propertyInstanceMap = org.codehaus.groovy.grails.plugins.DomainClassGrailsPlugin.PROPERTY_INSTANCE_MAP
    /**
     * Clean GORM cache
     */
    public void cleanUpGorm() {
        def session = sessionFactory.currentSession
        session.flush()
        session.clear()
        propertyInstanceMap.get().clear()
    }




    def test_annotation() {
        //testCyto()
        //testImage()
        testRemoveAnnotation()
        testUnion()
    }


    def testRemoveAnnotation() {
        def aid = []
        def atid = []
        UserAnnotation.findAllByUserAndImage(SecUser.read(16),ImageInstance.read(8123101)).each { annotation ->
            aid << annotation.id
              AnnotationTerm.findAllByUserAnnotation(annotation).each { at ->
                  atid << at.id
              }
        }

        atid.each {
            AnnotationTerm.read(it).delete(flush: true)
        }

        aid.each {
            UserAnnotation.read(it).delete(flush: true)
        }

    }

    def testUnion() {
        ImageInstance image = ImageInstance.read(8123101)


        def a1 = BasicInstanceBuilder.getUserAnnotationNotExist()
        a1.location = new WKTReader().read("POLYGON ((83816 50999, 83822 50996, 83824 50997, 83828 50995, 83830 50993, 83830 50988, 83829 50986, 83827 50984, 83823 50982, 83821 50982, 83818 50980, 83816 50980, 83812 50982, 83807 50987, 83807 50991, 83812 50997, 83816 50999))")
        a1.image = image
        a1.project = image.project
        saveDomain(a1)

        def a2 = BasicInstanceBuilder.getUserAnnotationNotExist()
        a2.location = new WKTReader().read("POLYGON ((83893 51230, 83899 51227, 83902 51224, 83905 51223, 83912 51216, 83905 51209, 83902 51208, 83900 51206, 83896 51204, 83895 51205, 83894 51204, 83890 51206, 83883 51213, 83883 51215, 83882 51216, 83882 51221, 83885 51224, 83885 51225, 83887 51227, 83893 51230))")

        a2.image = image
        a2.project = image.project
        assert a2.save(flush: true)  != null


       def a3 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a3.location = new WKTReader().read("POLYGON ((83586 51264, 83588 51264, 83592 51262, 83599 51257, 83599 51252, 83600 51251, 83600 51242, 83596 51238, 83595 51235, 83592 51232, 83584 51228, 83576 51232, 83574 51234, 83572 51238, 83568 51242, 83568 51247, 83571 51250, 83573 51254, 83580 51261, 83586 51264))")

       a3.image = image
       a3.project = image.project
       assert a3.save(flush: true)  != null

       def a4 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a4.location = new WKTReader().read("POLYGON ((84292 50836, 84292 50815, 84266 50815, 84270 50823, 84270 50826, 84274 50828, 84277 50828, 84292 50836))")

       a4.image = image
       a4.project = image.project
       assert a4.save(flush: true)  != null

       def a5 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a5.location = new WKTReader().read("POLYGON ((84470 51065, 84471 51065, 84471 50926, 84453 50935, 84451 50935, 84385 50902, 84373 50890, 84369 50888, 84360 50888, 84353 50891, 84338 50883, 84338 50903, 84340 50906, 84340 50946, 84326 50960, 84326 50966, 84327 50967, 84329 50981, 84338 50991, 84338 50997, 84340 50999, 84351 51004, 84373 51026, 84375 51029, 84378 51030, 84380 51032, 84384 51034, 84389 51034, 84402 51041, 84403 51040, 84408 51043, 84410 51043, 84413 51041, 84417 51043, 84420 51043, 84423 51041, 84470 51065))")

       a5.image = image
       a5.project = image.project
       assert a5.save(flush: true)  != null


       def a6 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a6.location = new WKTReader().read("POLYGON ((84470 51182, 84471 51182, 84471 51153, 84464 51156, 84455 51165, 84455 51172, 84456 51173, 84456 51175, 84459 51178, 84460 51178, 84463 51180, 84467 51180, 84470 51182))")

       a6.image = image
       a6.project = image.project
       assert a6.save(flush: true)  != null

       def a7 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a7.location = new WKTReader().read("POLYGON ((84311 51189, 84315 51185, 84315 51177, 84314 51175, 84307 51168, 84307 51124, 84296 51112, 84296 51110, 84294 51108, 84290 51106, 84289 51107, 84286 51105, 84284 51105, 84273 51111, 84272 51110, 84263 51114, 84261 51116, 84260 51123, 84257 51128, 84257 51134, 84258 51135, 84258 51137, 84262 51141, 84262 51147, 84266 51149, 84292 51175, 84294 51178, 84295 51178, 84301 51184, 84311 51189))")

       a7.image = image
       a7.project = image.project
       assert a7.save(flush: true)  != null

       def a8 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a8.location = new WKTReader().read("POLYGON ((84043 51324, 84067 51324, 84067 51303, 84064 51300, 84060 51298, 84058 51298, 84057 51297, 84049 51301, 84046 51304, 84046 51310, 84043 51313, 84043 51324))")

       a8.image = image
       a8.project = image.project
       assert a8.save(flush: true)  != null


       def a9 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a9.location = new WKTReader().read("POLYGON ((84555 51324, 84983 51324, 84982 50890, 84958 50878, 84954 50879, 84949 50876, 84942 50880, 84917 50867, 84906 50871, 84902 50875, 84902 50882, 84883 50901, 84883 50921, 84890 50928, 84890 50968, 84869 50989, 84829 51009, 84798 50993, 84792 50993, 84783 50988, 84778 50988, 84746 51004, 84701 50982, 84679 50960, 84675 50958, 84659 50963, 84648 50973, 84607 50993, 84567 50973, 84557 50963, 84550 50960, 84529 50939, 84529 50898, 84550 50877, 84573 50866, 84581 50856, 84578 50842, 84572 50834, 84572 50815, 84474 50815, 84474 51254, 84534 51284, 84555 51305, 84555 51324))")

       a9.image = image
       a9.project = image.project
       assert a9.save(flush: true)  != null


       def a10 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a10.location = new WKTReader().read("POLYGON ((85488 51324, 85495 51324, 85495 51318, 85494 51318, 85493 51319, 85490 51320, 85488 51322, 85488 51324))")

       a10.image = image
       a10.project = image.project
       assert a10.save(flush: true)  != null


       def a11 = BasicInstanceBuilder.getUserAnnotationNotExist()
       a11.location = new WKTReader().read("POLYGON ((84986 51324, 85045 51324, 85045 51305, 85063 51286, 85063 51240, 85093 51210, 85093 51182, 85114 51161, 85154 51141, 85230 51181, 85251 51202, 85251 51242, 85241 51252, 85240 51263, 85246 51270, 85254 51275, 85263 51268, 85264 51263, 85264 51251, 85255 51242, 85255 51202, 85276 51181, 85316 51161, 85321 51162, 85346 51149, 85360 51156, 85367 51153, 85370 51150, 85372 51138, 85368 51133, 85347 51123, 85326 51102, 85325 51094, 85318 51089, 85304 51089, 85285 51099, 85269 51101, 85223 51078, 85201 51056, 85201 51029, 85198 51026, 85190 51022, 85170 51024, 85130 51004, 85104 50978, 85104 50958, 85102 50956, 85093 50952, 85076 50958, 85042 50941, 85034 50945, 85028 50951, 84986 50972, 84986 51324))")

       a11.image = image
       a11.project = image.project
       assert a11.save(flush: true)  != null

       def at1 = BasicInstanceBuilder.getAnnotationTermNotExist(a1,true)
       def at2 = BasicInstanceBuilder.getAnnotationTermNotExist(a2,true)
       def at3 = BasicInstanceBuilder.getAnnotationTermNotExist(a3,true)
       def at4 = BasicInstanceBuilder.getAnnotationTermNotExist(a4,true)
       def at5 = BasicInstanceBuilder.getAnnotationTermNotExist(a5,true)
       def at6 = BasicInstanceBuilder.getAnnotationTermNotExist(a6,true)
       def at7 = BasicInstanceBuilder.getAnnotationTermNotExist(a7,true)
       def at8 = BasicInstanceBuilder.getAnnotationTermNotExist(a8,true)
       def at9 = BasicInstanceBuilder.getAnnotationTermNotExist(a9,true)
       def at10 = BasicInstanceBuilder.getAnnotationTermNotExist(a10,true)
       def at11 = BasicInstanceBuilder.getAnnotationTermNotExist(a11,true)
       at1.term = Term.read(8844845)
       at2.term = at1.term
       at3.term = at1.term
       at4.term = at1.term
       at5.term = at1.term
       at6.term = at1.term
       at7.term = at1.term
       at8.term = at1.term
       at9.term = at1.term
       at10.term = at1.term
       at11.term = at1.term

        at2.save(flush:true)
       at3.save(flush:true)
       at4.save(flush:true)
       at5.save(flush:true)
       at6.save(flush:true)
       at7.save(flush:true)
       at8.save(flush:true)
       at9.save(flush:true)
       at10.save(flush:true)
       at11.save(flush:true)

        render "ok"
    }


    /*
     * e24_metripol_result_I0.png
      e24_metripol_result_phi.png
      e24_metripol_result_sin_delta.png
      e25_metripol_result_I0.png
      e25_metripol_result_phi.png
      e25_metripol_result_sin_delta.png
     *
     */


      /*
      _I0.png
      _phi.png
      _sin_delta.png
       */





















    def testImage() {
        int idProject = 57
        Project project = Project.read(idProject)
        def images = ImageInstance.findAllByProject(project)
        def data = []
        def filenames = images.collect{
            println it.baseImage.filename
            it.baseImage.filename.split("\\.")[0]
        }
        println filenames
        filenames = filenames.unique().sort()

        filenames.each { filename ->
            images = ImageInstance.findAllByProjectAndBaseImageInList(project,AbstractImage.findAllByFilenameLike("${filename}%"))
//            println "images=$images"
            println "groupame=$filename"

            ImageGroup imageGroup = new ImageGroup(project:project,name:filename)
            saveDomain(imageGroup)




            def slices = []
            //sort slice index (convert to long to avoid: string sort like 10, 1, 20...)
            images.each { img ->
                slices << Long.parseLong(img.baseImage.filename.split("\\.")[1].split("_")[0])
            }
            slices.sort()

            slices.eachWithIndex { slice, index ->
                def regex1 = "${filename}.${slice}\\_%"
                def regex2 = "${filename}.${slice}\\.%"
                //println regex1 + "==="+regex2
                def imagesFinal = ImageInstance.findAllByProjectAndBaseImageInList(project,AbstractImage.findAllByFilenameLikeOrFilenameLike(regex1,regex2))


                if(imagesFinal.size()==1) {
                     def image =imagesFinal.get(0)


                    ImageSequence imageSequence = new  ImageSequence(image:image,channel:0,zStack:0,slice:index,time:0,imageGroup:imageGroup)
                    saveDomain(imageSequence)
                } else {
                    println "error=${imagesFinal}"
                    throw new Exception();
                }
            }

        }


        def all = ImageGroup.findAllByProject(project)

                   all.each { imageG ->
                       def c = ImageSequence.createCriteria()
                       def imgSeq = c.list {
                            eq('imageGroup',imageG)
                            order('channel', 'asc')
                           order('zStack', 'asc')
                           order('slice', 'asc')
                           order('time', 'asc')
                       }
                       println "**************************************"+imageG.name
                       imgSeq.each {
                            println it.image.baseImage.filename

                       }

                   }




    }


    def testCyto() {
        Browser.drive {
            println "toto!!!"
            go "http://localhost:8080"
           // go "http://google.com/ncr"
//            println it
//            println $("body")
//            println $("body").text()
//            println $("body").children()
//
//            println $("img")
//            println $("input")

            printChildren($("body"),0)

            Thread.sleep(10000)

            waitFor {
                title.endsWith("Google Search")
            }

            printChildren($("body"),0)

              // make sure we actually got to the page
             assert title == "Google"

            $("input", name: "q").value("wikipedia")

            $("input", name: "btnG").click()

            waitFor { title.endsWith("Google Search") }

        }
    }

    def printChildren(def elem, int deep) {

        def prefix =""
        for(int i=0;i<deep;i++) {
            prefix = prefix + "\t"
        }

        println prefix + elem
//        println elem
        def childrens = elem.children()
        childrens.each {
            printChildren(it,deep+1)
        }
    }


    def testGeb() {
        Browser.drive {
            println "toto!!!"
            go "http://google.com/ncr"

            println it
            println $("body")
            println $("img")
            println $("input")

              // make sure we actually got to the page
             assert title == "Google"

            $("input", name: "q").value("wikipedia")

            $("input", name: "btnG").click()

            waitFor { title.endsWith("Google Search") }

        }
    }

}
